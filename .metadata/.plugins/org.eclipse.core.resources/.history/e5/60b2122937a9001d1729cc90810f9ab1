
public class Arvore<T extends Comparable<T>> {

	
	private NoBi<T> raiz;
	
	public Arvore() {
		this.raiz = null;
	}
	
	public void inserir(T conteudo) {
		NoBi<T> novoNo = new NoBi<>(conteudo);
		raiz = inserir(raiz, novoNo);
	}
	
	private NoBi<T> inserir(NoBi<T> atual, NoBi<T> novoNo){
		if(atual == null) {
			return novoNo;
					
		}else if(novoNo.getConteudo().compareTo(atual.getConteudo())<0) {
			atual.setNoEsquerda(inserir(atual.getNoEsquerda(),novoNo));
		}else {
			atual.setNoDireita(inserir(atual.getNoDireita(),novoNo));
		}
		return null;
	}
	
	public void exibirInOrdem(){
		System.out.println("\n Exibindo em ordem");
		exibirInOrdem(this.raiz);
	}
	private void exibirInOrdem(NoBi<T> atual) {
		if( atual !=null) {
			exibirInOrdem(atual.getNoEsquerda());
			System.out.println(atual.getConteudo() + ",");
			exibirInOrdem(atual.getNoDireita());
		}
	}
	
	public void exibirPosOrdem(){
		System.out.println("\n Exibindo em ordem");
		exibirPosOrdem(this.raiz);
	}
	private void exibirPosOrdem(NoBi<T> atual) {
		if( atual !=null) {
			exibirPosOrdem(atual.getNoEsquerda());
			exibirPosOrdem(atual.getNoDireita());
			System.out.println(atual.getConteudo() + ",");
		}
	}
	
	public void exibirPreOrdem(){
		System.out.println("\n Exibindo em ordem");
		exibirPreOrdem(this.raiz);
	}
	private void exibirPreOrdem(NoBi<T> atual) {
		if( atual !=null) {
			System.out.println(atual.getConteudo() + ",");
			exibirPreOrdem(atual.getNoEsquerda());
			exibirPreOrdem(atual.getNoDireita());
			
		}
	}
}
